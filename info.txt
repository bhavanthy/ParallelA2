> Assignment 2 - MPI Programming
> ------------------------------
> Due Friday, October 26, 2018
> 
> 
> Write a C program which performs multiplication of a vector and
> a matrix. Use MPI to add parallel operations to the multiplication.
> Time the performance of the system using different numbers of processes and
> different sizes of matrices.
> 
> The program should accept two different types of command line arguments.
> 1. If the user enters two numbers after the program name:
> 	./a2 4 100
>    Then the first number is the number of processes to create and the second
>    is the size of the vector and matrix. Print the time it took to perform the
>    multiplication to the screen.
> 2. If the user enters -g on the command line then the program should execute
>    several tests using different numbers of processes and matrix/vector sizes
>    and print out the results in the table described below.
> 
> Initialize the values in the arrays using random numbers.
> 
> Process 0 should dynamically allocate the memory for the two vectors and
> the matrix. The other processes should dynamically allocate the memory for
> the two vectors and for the subsection of matrix B which they will need to
> store.
> 
> The size of the vector A will be 1xSIZE. The matrix B will be square and will
> be SIZExSIZE. For example, for size 10:
> 
> AxB = [0 1 2 3 4 5 6 7 8 9] |0 1 2 3 4 5 6 7 8 9 |   = C
>                                              |1                             |
>                                              |2                             |
>                                              |3                             |
>                                              |4                             |
>                                              |5                             |
>                                              |6                             |
>                                              |7                             |
>                                              |8                             |
>                                              |9                             |
> 
> 
> Store the results of the multiplication in a third 1xSIZE vector C.
> 
> 
> When the user enters the -g flag on the command line, run the program with
> maximum matrix and vector SIZEs of 100, 1000, 10000, and 20000 floats. For each
> of these matrix sizes, run the program  with 1, 2, 3, and 4 processes.
> Your program should output the results in a table that lists the number of
> processes along the top and the number maximum size of the matrix on the side.
> 
> 
> Size		Processes
> 	       1 	2	3	4
> 100	..	..	..	..
> 1000	..	..	..	..
> 10000	..	..	..	..
> 20000	..	..	..	..
> 
> Replace the .. with the timing information.
> 
> Fill in the table with the times it takes to perform the multiplication
> for each size and number of processes. Calculate the time only for process 0.
> Timing will include the time to send the matrices to other processes,
> to perform the multiplication, to receive the results from processes, and
> to combine the partial results into a final vector C. 
> 
> Donâ€™t include the time required to allocate the arrays or initialize them
> by process 0. Timing is intended to measure the time the system spends running
> parallel operations and the time necessary to combine the partial results into
> a final vector. Operations that can be setup before the parallel program
> begins do not need to be timed. When only one process is used then time
> the operations that would run in parallel with more than one process.
> Do not write separate parallel and serial code. Write one section of code
> that runs in parallel if more than one process is specified and runs in
> serial if only one process is used.
> 
> The problem can be solved using data parallelism by dividing the matrix
> into smaller sections and using each process to calculate part of the result.
> Divide the matrix into approximately evenly sized pieces based upon the number
> of processes.  Process 0 should allocate and randomize the initial matrix B and
> vector A.  Process 0 will send the pieces of the matrix B and the complete
> vector A to each of the other processes. Each process will then calculate
> a section of the result C. Once the section of C has been calculated, each
> process will send the result back to process 0 where it will combine
> the pieces into a single result vector C.
> 
> Process 0 will be used to calculate part of the result if there are more than
> one processes used. If there is only one process then process 0 will run
> as a serial program and will perform all of the multiplications. In this case
> it  will not perform any communications.
> 
> 
> Documentation
> -------------
> Include a readme contains your name and student number.
> Provide the timing result table from running your program with the -g flag
> in the readme.
> 
> 
> Coding Practices
> ----------------
> Name your executable a2.
> 
> Write the code using standard stylistic practices. Use functions, 
> reasonable variable names, and consistent indentation.
> If the code is difficult for the TA to understand then you
> will lose marks.
> 
> As usual, keep backups of your work using source control software.
> 
> 
> Submitting the Assignment
> -------------------------
> Submit the assignment using Courselink. Submit only the source code
> and the makefile. Bundle the code in a tar file.
> 
> The assignments will be marked on the linux.socs.uoguelph.ca server.
> If you develop your code on a different platform then it is a good
> idea to put the include files in an #ifdef for that system
> so they will still compile on the server. Test your program on the
> server before you submit it. 
> 
> The TA will unpack your code and type "make". They will then try to
> run executables named a2.  If the makefile is missing, the make command
> does not work, or the program does not execute then you will lose
> a substantial number of marks.
> 
> It is always a good idea to unpack and test the file you are submitting
> to be sure that what you submit actually compiles. 